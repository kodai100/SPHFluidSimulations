#pragma kernel buildGrid
#pragma kernel sph

struct Particle {
	float3 position;
	float3 velocity;
	float3 force;
	float density;
	float pressure;
};

struct HashGridKeyValue {
	unsigned int key;
	unsigned int value;
};

#define SIMULATION_BLOCK_SIZE 32

StructuredBuffer<Particle> _ParticleBufferRead;
RWStructuredBuffer<Particle> _ParticleBufferWrite;

StructuredBuffer  <HashGridKeyValue>           _GridBufferRead;
RWStructuredBuffer<HashGridKeyValue>           _GridBufferWrite;

StructuredBuffer  <uint2>           _GridIndicesBufferRead;
RWStructuredBuffer<uint2>           _GridIndicesBufferWrite;

int _NumParticles;

// SPH -------------------------------------------
float SPH_RESTDENSITY;
float SPH_INTSTIFF;
float SPH_PMASS;
float SPH_SIMSCALE;
float H;
float PI;
float DT;
float SPH_VISC;
float SPH_LIMIT;
float SPH_RADIUS;
float SPH_EPSILON;
float SPH_EXTSTIFF;
float SPH_EXTDAMP;
float3 MIN;
float3 MAX;
float3 GRAVITY;
float Poly6Kern;
float SpikyKern;
float LapKern;

float3 _GridDim;
// SPH -------------------------------------------


float3 GridCalculateCell(float3 position) {
	return position * _GridDim.xyz / MAX;
}

uint GridConstructKey(uint3 xyz) {
	// Bit pack [-----UNUSED-----][----Y---][----X---][----Z---]
	//                16-bit         8-bit     8-bit     8-bit
	return dot(xyz.zyx, uint3(256 * 256, 256, 1));
}

HashGridKeyValue GridConstructKeyValuePair(uint3 xyz, uint value) {
	HashGridKeyValue h;
	h.key = GridConstructKey(xyz);
	h.value = value;
	return h;
}

[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void buildGrid(uint3 DTid : SV_DispatchThreadID) {
	const unsigned int id = DTid.x;

	float3 position = _ParticleBufferRead[id].position;
	float3 grid_xyz = GridCalculateCell(position);

	_GridBufferWrite[id] = GridConstructKeyValuePair((uint3)grid_xyz, id);
}

[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void sph(uint3 DTid : SV_DispatchThreadID) {

	const unsigned int id = DTid.x;
	Particle particle = _ParticleBufferRead[id];

	// calc amount ---------------------------------------------
	float r2, c;
	float3 dr;
	float H2 = H * H; // 有効半径の2乗

	float sum = 0.0;

	for (unsigned int j = 0; j < (uint)_NumParticles; j++) {
		if (id == j) continue;
		else {
			dr = (particle.position - _ParticleBufferRead[j].position) * SPH_SIMSCALE;
			r2 = dot(dr, dr);
			if (H2 > r2) {
				c = H2 - r2;
				sum += c * c * c;
			}
		}
	}

	particle.density = (float)sum * SPH_PMASS * Poly6Kern;
	particle.pressure = SPH_INTSTIFF * max(pow(particle.density / SPH_RESTDENSITY, 3) - 1, 0);
	particle.density = 1.0 / (particle.density + 1e-4);
	// calc amount -------------------------------------------


	// calc force --------------------------------------------
	float3 pterm, vterm;
	float r;
	float3 force, fcurr;

	force = float3(0, 0, 0);

	for (unsigned int j = 0; j < (uint)_NumParticles; j++) {
		if (id == j) continue;
		else {
			dr = (particle.position - _ParticleBufferRead[j].position) * SPH_SIMSCALE;
			r = sqrt(dot(dr, dr));
			if (H > r) {
				c = H - r;
				pterm = -0.5 * c * c * SpikyKern / r * (particle.pressure + _ParticleBufferRead[j].pressure) * dr;
				vterm = LapKern * SPH_VISC * c * (_ParticleBufferRead[j].velocity - particle.velocity);
				fcurr = pterm + vterm;
				fcurr *= SPH_PMASS * _ParticleBufferRead[j].density;
				force += fcurr;
			}
		}
	}

	particle.force = force;
	// calc force --------------------------------------------


	// calc advance --------------------------------------------
	float3 accel, g, norm;
	float speed, diff, adj;

	g = GRAVITY;

	// Penalty method
	accel = particle.force * particle.density;

	speed = dot(accel, accel);
	if (speed > SPH_LIMIT * SPH_LIMIT) {
		accel *= SPH_LIMIT / sqrt(speed);
	}

	// Z-axis walls
	diff = 2.0 * SPH_RADIUS - (particle.position.z - MIN.z) * SPH_SIMSCALE;
	if (diff > SPH_EPSILON) {
		norm = float3(0, 0, 1);
		adj = SPH_EXTSTIFF * diff - SPH_EXTDAMP * dot(norm, particle.velocity);
		accel += adj * norm;
	}
	diff = 2 * SPH_RADIUS - (MAX.z - particle.position.z) * SPH_SIMSCALE;
	if (diff > SPH_EPSILON) {
		norm = float3(0, 0, -1);
		adj = SPH_EXTSTIFF * diff - SPH_EXTDAMP * dot(norm, particle.velocity);
		accel += adj * norm;
	}

	// X-axis walls
	diff = 2.0 * SPH_RADIUS - (particle.position.x - MIN.x) * SPH_SIMSCALE;
	if (diff > SPH_EPSILON) {
		norm = float3(1, 0, 0);
		adj = SPH_EXTSTIFF * diff - SPH_EXTDAMP * dot(norm, particle.velocity);
		accel += adj * norm;
	}
	diff = 2.0 * SPH_RADIUS - (MAX.x - particle.position.x) * SPH_SIMSCALE;
	if (diff > SPH_EPSILON) {
		norm = float3(-1, 0, 0);
		adj = SPH_EXTSTIFF * diff - SPH_EXTDAMP * dot(norm, particle.velocity);
		accel += adj * norm;
	}

	// Y-axis walls
	diff = 2.0 * SPH_RADIUS - (particle.position.y - MIN.y) * SPH_SIMSCALE;
	if (diff > SPH_EPSILON) {
		norm = float3(0, 1, 0);
		adj = SPH_EXTSTIFF * diff - SPH_EXTDAMP * dot(norm, particle.velocity);
		accel += adj * norm;
	}
	diff = 2.0 * SPH_RADIUS - (MAX.y - particle.position.y) * SPH_SIMSCALE;
	if (diff > SPH_EPSILON) {
		norm = float3(0, -1, 0);
		adj = SPH_EXTSTIFF * diff - SPH_EXTDAMP * dot(norm, particle.velocity);
		accel += adj * norm;
	}

	accel += g;
	
	particle.velocity += accel * DT;
	particle.position += particle.velocity * DT / SPH_SIMSCALE;
	// calc force --------------------------------------------

	_ParticleBufferWrite[id] = particle;
	
}