#pragma kernel sph

struct Particle2D {
	float2 position;
	float2 velocity;
	float2 force;
	float density;
	float pressure;
};

#define SIMULATION_BLOCK_SIZE 32

StructuredBuffer<Particle2D> _ParticleBufferRead;
RWStructuredBuffer<Particle2D> _ParticleBufferWrite;

cbuffer SPH_PARAMS {
	int _MaxParticleNum;
	float SPH_RESTDENSITY;
	float SPH_PRESSURESTIFF;
	float SPH_PMASS;
	float SPH_SIMSCALE;
	float H;
	float PI;
	float DT;
	float SPH_VISC;
	float SPH_LIMIT;
	float SPH_RADIUS;
	float SPH_EPSILON;
	float SPH_EXTSTIFF;
	float SPH_EXTDAMP;
	float SPH_PDIST;
	float2 MIN;
	float2 MAX;
	float2 INIT_MIN;
	float2 INIT_MAX;
	float2 GRAVITY;
	float Poly6Kern;
	float SpikyKern;
	float LapKern;
};

[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void sph(uint3 DTid : SV_DispatchThreadID) {

	const unsigned int id = DTid.x;
	Particle2D particle = _ParticleBufferRead[id];

	// calc amount ---------------------------------------------
	float r2, c;
	float2 dr;
	float H2 = H * H; // 有効半径の2乗

	float sum = 0.0;

	for (unsigned int j = 0; j < (uint)_MaxParticleNum; j++) {
		if (id == j) {
			continue;
		}
		else {
			dr = (particle.position - _ParticleBufferRead[j].position) * SPH_SIMSCALE;
			r2 = dot(dr, dr);
			if (H2 > r2) {
				c = H2 - r2;
				sum += c * c * c;
			}
		}
	}

	particle.density = (float)sum * SPH_PMASS * Poly6Kern;
	particle.pressure = max(pow(particle.density / SPH_RESTDENSITY, 3) - 1, 0) * SPH_PRESSURESTIFF;	// acutually 3 -> 7
	particle.density = 1.0 / (particle.density + 1e-4);
	// calc amount -------------------------------------------


	// calc force --------------------------------------------
	float2 pterm, vterm;
	float r;
	float2 force, fcurr;

	force = float2(0, 0);

	for (unsigned int j = 0; j < (uint)_MaxParticleNum; j++) {
		if (id == j) {
			continue;
		}
		else {
			dr = (particle.position - _ParticleBufferRead[j].position) * SPH_SIMSCALE;
			r = sqrt(dot(dr, dr));
			if (H > r) {
				c = H - r;
				pterm = -0.5 * c * c * SpikyKern / r * (particle.pressure + _ParticleBufferRead[j].pressure) * dr;
				vterm = LapKern * SPH_VISC * c * (_ParticleBufferRead[j].velocity - particle.velocity);
				fcurr = pterm + vterm;
				fcurr *= SPH_PMASS * _ParticleBufferRead[j].density;
				force += fcurr;
			}
		}
	}

	particle.force = force;
	// calc force --------------------------------------------


	// calc advance --------------------------------------------
	float2 accel, g, norm;
	float speed, diff, adj;

	g = GRAVITY;

	// Penalty method
	accel = particle.force * particle.density;

	speed = dot(accel, accel);
	if (speed > SPH_LIMIT * SPH_LIMIT) {
		accel *= SPH_LIMIT / sqrt(speed);
	}

	// X-axis walls
	diff = 2.0 * SPH_RADIUS - (particle.position.x - MIN.x) * SPH_SIMSCALE;
	if (diff > SPH_EPSILON) {
		norm = float2(1, 0);
		adj = SPH_EXTSTIFF * diff - SPH_EXTDAMP * dot(norm, particle.velocity);
		accel += adj * norm;
	}
	diff = 2.0 * SPH_RADIUS - (MAX.x - particle.position.x) * SPH_SIMSCALE;
	if (diff > SPH_EPSILON) {
		norm = float2(-1, 0);
		adj = SPH_EXTSTIFF * diff - SPH_EXTDAMP * dot(norm, particle.velocity);
		accel += adj * norm;
	}

	// Y-axis walls
	diff = 2.0 * SPH_RADIUS - (particle.position.y - MIN.y) * SPH_SIMSCALE;
	if (diff > SPH_EPSILON) {
		norm = float2(0, 1);
		adj = SPH_EXTSTIFF * diff - SPH_EXTDAMP * dot(norm, particle.velocity);
		accel += adj * norm;
	}
	diff = 2.0 * SPH_RADIUS - (MAX.y - particle.position.y) * SPH_SIMSCALE;
	if (diff > SPH_EPSILON) {
		norm = float2(0, -1);
		adj = SPH_EXTSTIFF * diff - SPH_EXTDAMP * dot(norm, particle.velocity);
		accel += adj * norm;
	}

	accel += g;

	particle.velocity += accel * DT;
	particle.position += particle.velocity * DT / SPH_SIMSCALE;
	// calc force --------------------------------------------

	_ParticleBufferWrite[id] = particle;

}